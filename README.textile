h1. rah_repeat

p. "Project page":http://rahforum.biz/plugins/rah_repeat | "Twitter":http://twitter.com/gocom | "GitHub":https://github.com/gocom/rah_repeat | "Support forum":http://forum.textpattern.com/viewtopic.php?id=32384 | "Donate":http://rahforum.biz/donate/rah_repeat

p. Rah_repeat is a "Textpattern CMS":http://www.textpattern.com plugin used for iterations. The plugin splits a provided value to smaller chunks and iterates overs, just like you would expect from a for each loop in any programming language. With the plugin you can turn a simple comma-separated list of values into advanced HTML output, or extract parts of a value as "variables":http://textpattern.net/wiki/index.php?title=variable.

h2. Requirements

p. Rah_repeat's minimum requirements:

* Textpattern 4.4.1 or newer.
* PHP 5.2 or newer.

h2. Installing

p. Rah_repeat's installation follows the standard plugin installation steps.

# Download the plugin installation code.
# Copy and paste the installation code into the _Install plugin_ box of your Textpattern Plugin pane.
# Run the automated setup.
# After the setup is done, activate the plugin. Done.

h2. Basics

bc. <txp:rah_repeat range=min, max, step" value="value1, value2, ..." assign="variable1, variable2, ...">
	...contained statement...
</txp:rah_repeat>

p. Rah_repeat's main job is primely iterating over values. Its iteration power can used to create lists or extract subsets of data. The plugin can come very handy when you have a "custom field":http://textpattern.net/wiki/index.php?title=custom_field that contains comma-separated list of values which you want to present as a HTML list or extract as individual separate values.

p. The values you want to iterate over are provided to the tag with the @value@ attribute, each individual subset value separated from each other with the @delimiter@, defaulting to a comma. The current value that is being iterated over can be returned using the @rah_repeat_value@ tag, wrapped in @rah_repeat@ block. The following would generate a HTML list from comma-separated list of @red, blue, green@.

bc. <txp:rah_repeat value="red, blue, green" wraptag="ul" break="li">
	<txp:rah_repeat_value />
</txp:rah_repeat>

p. In addition to iterating over values and creating lists, the tag can also be used to extract values and assign each one to a "variable":http://textpattern.net/wiki/index.php?title=variable tag. This can be done using the @rah_repeat@ tag's @assign@ attribute. The attribute takes a comma-separated list of variable names that will be created, each containing one of the values.

bc. <txp:rah_repeat value="red, blue, green" assign="color1, color2, color3" />

p. The above would extra each of the colors as a variable. These variables would be named as @color1@, @color2@ and @color3@. Using @<txp:variable name="color1" />@ would return @red@.

h2. Tags and attributes

p. The plugin comes with a total of four tags. The main tag @rah_repeat@, a single tag @rah_repeat_value@, and two conditionals @rah_repeat_if_first@ and @rah_repeat_if_last@.

h3. rah_repeat

bc. <txp:rah_repeat value="value1, value2, ...">
	...contained statement...
</txp:rah_repeat>

p. The @<txp:rah_repeat>@ tag is the plugin's main tag. It's a container tag used for iterations. Attributes for it are as follows.

p. *value*
Sets the values that are passed to the tag. Multiple values are separated with the @delimiter@ which by default is a comma (@,@). This attribute or either @range@Â is required.
Example: @value="dog,cat,human"@ Default: @""@

p. *range*
Creates a list of values containing a range of elements. Using @range@ overrides @value@ attribute. It works identically to PHP's "range":http://php.net/manual/en/function.range.php function and uses same sequence syntax as it. The attribute's value consists of three parts: @minimum@, @maximum@ and @step@, which are separated by a comma. All but @step@ are required.
Example: @range="1, 10"@ Default: undefined

p. *delimiter*
Sets the delimiter that is used to split the provided @value@ into a list. Default delimiter is comma (@,@).
Example: @delimiter="|"@ Default: @","@

p. *assign*
Assigns values as Textpattern's "variables":http://textpattern.net/wiki/index.php?title=variable. Takes a comma-separated list of variable names, @variable1, variable2, @variable3, ...@.
Example: @assign="label, value"@ Default: @unset@

p. *duplicates*
Removes duplicate values from the list. If the attribute is set to @1@, only first occurrence of the value is used and duplicates are stripped off.
Example: @duplicates="1"@ Default: @"0"@

p. *exclude*
Exclude certain values from the list. The attribute takes a comma (or @delimiter@, if @delimiter@ is changed) separated list of values.
Example: @exclude="foo,bar"@ Default: undefined

p. *trim*
Trims values from extra whitespace. This can be particularly helpful if the provided values are from user-input (e.g. from an article field), or the values just have extra whitespace, and the resulting output has to be clean (i.e. used in XML, JavaScript or to a "variable":http://textpattern.net/wiki/index.php?title=variable comparison). If you want to keep whitespace intact, you can use this attribute. By default the option is on, and values are trimmed.
Example: @trim="0"@ Default: @"1"@

p. *sort*
Sorts the values. If the attribute is used, all values are rearranged to the specified order. Available options are @regular@ (sorts without checking the type), @numeric@ (sorts in a numeric order), @string@ (sorts as strings) and @locale_string@ (sorts according server's locale settings). All the values can be  followed by the sorting direction, either @desc@ and @asc@. By default the option isn't used (unset), and the values are returned in the order they were supplied.
Example: @sort="regular asc"@ Default: @""@

p. *offset*
The number of items to skip. Default is @0@ (none).
Example: @offset="5"@ Default: @"0"@

p. *limit*
The number of items are displayed. By default there is no limit, and all items are returned.
Example: @limit="10"@ Default: undefined

p. *wraptag*
The (X)HTML tag (without brackets) used to wrap the output.
Example: @wraptag="div"@ Default: @""@

p. *break*
The (X)HTML tag (without brackets) or a string used to separate list items.
Example: @"break="br"@ Default: @""@

p. *class*
The (X)HTML class applied to the @wraptag@. Default is unset.
Example: @class="plugin"@ Default: @""@

h3. rah_repeat_value

bc. <txp:rah_repeat value="value1, value2, ...">
	<txp:rah_repeat_value />
</txp:rah_repeat>

p. Rah_repeat_value a single tag, used to display a iterated value. The tag should be used inside a @<txp:rah_repeat></txp:rah_repeat>@ block. The tag has a single attribute, @escape@.

p. *escape*
If set to @1@, HTML and Textpattern markup are escaped, and special characters are converted to HTML entities. By default this option is off.
Example: @escape="1"@ Default: @"0"@

h3. rah_repeat_if_first

bc. <txp:rah_repeat value="value1, value2, ...">
	<txp:rah_repeat_if_first>
		Fist item.
	</txp:rah_repeat_if_first>
</txp:rah_repeat>

p. The @<txp:rah_repeat_if_first>@ tag is a container, and has no attributes. It's a conditional tag that checks if the current item is the first one.

h3. rah_repeat_if_last

bc. <txp:rah_repeat value="value1, value2, ...">
	<txp:rah_repeat_if_last>
		Last item.
	</txp:rah_repeat_if_last>
</txp:rah_repeat>

p. The @<txp:rah_repeat_if_last>@ tag is a container, and has no attributes. It's a conditional tag that checks if the current item is the last one.

h2. Examples

h3. Simple usage example

p. This example turns simple comma separated list of @dog,cat,human@ into a HTML list.

bc. <txp:rah_repeat wraptag="ul" break="li" value="dog,cat,human">
	A <txp:rah_repeat_value />.
</txp:rah_repeat>

p. The above returns:

bc. <ul>
	<li>A dog.</li>
	<li>A cat.</li>
	<li>A human.</li>
</ul>

h3. Using tags as values

p. As of Textpattern version 4.0.7, you can use tags inside tags.

p. Let's say that you have comma separated list of items stored inside article's "custom field":http://textpattern.net/wiki/index.php?title=custom_field. For example, list of "Nameless" video service's video IDs (@ID1,ID2,ID3,ID4@), and you want to embed each of those as a playable video.

p. We pass the custom field hosting the video IDs to rah_repeat tag (with the @value@ attribute), and place the video player code inside the container:

bc. <txp:rah_repeat value='<txp:custom_field name="MyCustomFieldName" />'>
	<object width="600" height="380">
		<param name="movie" value="http://example.com/v/<txp:rah_repeat_value />"></param>
		<embed src="http://example.com/v/<txp:rah_repeat_value />" width="600" height="380"></embed>
	</object>
</txp:rah_repeat>

p. The above code would output 4 embedded players (one for each clip), displaying the videos specified with the custom field.

h3. Taking advantage of offset and limit attributes

p. First display two items, then some text between, two more items, some more text and then the rest of the items.

bc. <txp:rah_repeat value='<txp:custom_field name="MyCustomFieldName" />' limit="2">
	<txp:rah_repeat_value />
</txp:rah_repeat>
<p>Some text here.</p>
<txp:rah_repeat value='<txp:custom_field name="MyCustomFieldName" />' offset="2" limit="4">
	<txp:rah_repeat_value />
</txp:rah_repeat>
<p>Some another cool phrase here.</p>
<txp:rah_repeat value='<txp:custom_field name="MyCustomFieldName" />' offset="4">
	<txp:rah_repeat_value />
</txp:rah_repeat>

h3. Repeat inside repeat

bc. <txp:rah_repeat value="group1|item1|item2,group2|item1|item2">
	<ul>
		<txp:rah_repeat value='<txp:rah_repeat_value />' delimiter="|">
			<li><txp:rah_repeat_value /></li>
		</txp:rah_repeat>
	</ul>
</txp:rah_repeat>

p. Returns two HTML lists:

bc. <ul>
	<li>group1</li>
	<li>item1</li>
	<li>item2</li>
</ul>
<ul>
	<li>group2</li>
	<li>item1</li>
	<li>item2</li>
</ul>

h3. Basic usage of the if_first and the if_last tags

p. With the conditional tags @<txp:rah_repeat_if_first />@ and @<txp:rah_repeat_if_last>@ we can test which value is the first and which is the last.

bc. <txp:rah_repeat value="item1,item2,item3,item4,item5" wraptag="ul" break="li">
	<txp:rah_repeat_if_first>First: </txp:rah_repeat_if_first>
	<txp:rah_repeat_if_last>Last: </txp:rah_repeat_if_last>
	<txp:rah_repeat_value />
</txp:rah_repeat>

p. Returns:

bc. <ul>
	<li>First: item1</li>
	<li>item2</li>
	<li>item3</li>
	<li>item4</li>
	<li>Last: item5</li>
</ul>

h3. Trim beginning and ending whitespace from the value

bc. <txp:rah_repeat value="foo, bar" trim="1" break=","><txp:rah_repeat_value /></txp:rah_repeat>

p. The above returns the value without whitespace (notice the missing space before the bar):

bc. foo,bar

h3. Remove duplicate values

bc. <txp:rah_repeat break="," duplicates="1" value="foo,bar,bar,foo,bar,bar,foo,foobar">
	<txp:rah_repeat_value />
</txp:rah_repeat>

p. Returns: @foo, bar, foobar@

h3. Arrange the values from lowest to highest

bc. <txp:rah_repeat break="," value="b,a,c," sort="regular asc">
	<txp:rah_repeat_value />
</txp:rah_repeat>

p. Returns: @a, b, c@

h3. Excluding values

bc. <txp:rah_repeat value="foo,bar,foobar" exclude="foo,bar">
	<txp:rah_repeat_value />
</txp:rah_repeat>

p. Returns: @foobar@

h3. Using range attribute

p. With the @range@ it's possible to create a range of elements with out specifying each. For example generating list of alphabet (A-z) can be done with range.

bc. <txp:rah_repeat range="a, z, 1">
	<txp:rah_repeat_value />
</txp:rah_repeat>

p. Or listing number from 0 to 10.

bc. <txp:rah_repeat range="0, 10, 1">
	<txp:rah_repeat_value />
</txp:rah_repeat>

p. Or values @0@, @2@, @4@, and @6@.

bc. <txp:rah_repeat range="0, 6, 2">
	<txp:rah_repeat_value />
</txp:rah_repeat>

h3. Assign variables with assign attribute

p. The @assign@ attribute allows exporting split values as "variables":http://textpattern.net/wiki/index.php?title=variable.

bc.. <txp:rah_repeat value="JavaScript,jQuery,1.8.0" assign="language, framework, version" />

<txp:variable name="language" />
<txp:variable name="framework" />

<txp:if_variable name="version" value="1.8.0">
	Version is 1.8.0.
</txp:if_variable>

h2. Changelog

h3. Version 0.8 - upcoming

* Fixed: made the @sort@ attribute's direction optional.
* Added: @exclude@ can now take and exclude empty strings (@""@) and zeros (@0@).
* Added: @range@ attribute. Allows generating automated lists (@range="min, max, step"@).
* Added: @assign@ attribute. Allows extracting values as variables.
* Added: @escape@ attribute to @<txp:rah_repeat_value />@.
* Added: Support for natural ordering (@sort="natural"@).
* Changed: Now @trim@ is enabled by default. Previously values weren't trimmed from white-space by default.
* Changed: Renamed @locale@ sorting option to @LOCALE_STRING@.
* Changed: Order can be reversed with out re-sorting by using @sort="desc"@.
* Now requires PHP 5.2 (or newer).

h3. Version 0.7 - 2011/12/02

* Added attribute @trim@. When set to @1@, provided values are trimmed from surrounding whitespace.
* Fixed: "locale" sorting option. Previously it sorted values as a string, not by locale options.
* Changed: limit's default to NULL. Leave limit unset if you only want offset without limit, or use a high value.
* Improved: Better offset and limit functionality. Now slices the list of values before staring to build the markup.

h3. Version 0.6 - 2010/05/09

* Added attribute: @exclude@.
* Fixed non-working @<txp:rah_repeat_if_last>@ tag. Issue was caused by v0.5 update.

h3. Version 0.5 - 2010/05/08

* Changed offset's default value from @unset@ to @0@.
* Added attribute: @sort@.
* Added attribute: @duplicates@.

h3. Version 0.4 - 2009/11/30

* Fixed: now returns old parent global, if two tags are used inside each other, instead of defining it empty.
* Added: @<txp:rah_repeat_if_first>@.
* Added: @<txp:rah_repeat_if_last>@.

h3. Version 0.3 - 2009/11/28

* Added attribute: @wraptag@.
* Added attribute: @break@.
* Added attribute: @class@.

h3. Version 0.2 - 2009/11/23

* Added attribute: @limit@.
* Added attribute: @offset@.

h3. Version 0.1 - 2009/11/20

* Initial release.